/* ========================================
 *  This file was generated by: https://github.com/iffyloop/EasyAirwindows
 *  Based on airwin2clap source: https://github.com/baconpaul/airwin2clap
 *  Please refer to airwin2clap author information contained later in this file
 * ======================================== */

#pragma once

#include <cstdint>
#include <cstring>
#include <string>

#include <cmath>

#include <set>
#include <string>
#include <math.h>

#pragma warning(push)
#pragma warning(disable : 4996)

namespace EasyAirwindows {

static constexpr double __EasyAirwindows_M_PI = 3.14159265358979323846;
static constexpr double __EasyAirwindows_M_PI_2 = 1.57079632679489661923;
static constexpr double __EasyAirwindows_M_PI_4 = 0.785398163397448309616;

//
// Created by Paul Walker on 6/20/22.
//

// This file has the smallest possible API required to allow each of the Airwin
// MacVST to compile without any external API.

typedef const void *__EasyAirwindows_audioMasterCallback;
typedef int __EasyAirwindows_VstPlugCategory;
typedef int32_t __EasyAirwindows_VstInt32;
#define __EasyAirwindows_vst_strncpy strncpy

static constexpr uint32_t __EasyAirwindows_kVstMaxProgNameLen = 32;
static constexpr uint32_t __EasyAirwindows_kVstMaxParamStrLen = 64;
static constexpr uint32_t __EasyAirwindows_kVstMaxProductStrLen = 64;
static constexpr uint32_t __EasyAirwindows_kVstMaxVendorStrLen = 64;

static constexpr uint32_t __EasyAirwindows_kPlugCategEffect = 1;


inline void __EasyAirwindows_float2string(float f, char *c, uint32_t n) {
    __EasyAirwindows_vst_strncpy(c, std::to_string(f).c_str(), n);
}

inline void __EasyAirwindows_dB2string(float value, char *t, uint32_t num) {
    if (value <= 0.00001) // -100 dB, show -inf from that point onwards
        __EasyAirwindows_vst_strncpy (t, "-inf", num);
    else
        __EasyAirwindows_float2string ((float)(20.0 * log10 (value)), t, num);
}

inline void __EasyAirwindows_int2string(int f, char *c, uint32_t n) {
    __EasyAirwindows_vst_strncpy(c, std::to_string(f).c_str(), n);
}

struct EasyAirwindowsAudioEffect {
    uint32_t numParams{0};
    EasyAirwindowsAudioEffect(__EasyAirwindows_audioMasterCallback audioMaster, uint32_t kNumPrograms, uint32_t kNumParameters) : numParams(kNumParameters){}

    virtual ~EasyAirwindowsAudioEffect() = default;


    double sr{1};

    void setSampleRate(double d) { sr = d; }
    double getSampleRate() { return sr; }

    int nin{0}, nout{0};
    void setNumInputs(uint32_t kNumInputs) { nin = kNumInputs; }
    void setNumOutputs(uint32_t kNumOutputs) { nout = kNumOutputs; }
    void setUniqueID(uint32_t kUniqueId) {}

    bool canProcessReplacing() { return false; }
    bool canDoubleReplacing() { return false; }

    void programsAreChunks(bool b) {}
    virtual void processReplacing(float **inputs, float **outputs, __EasyAirwindows_VstInt32 sampleFrames) = 0;
    virtual void processDoubleReplacing(double **inputs, double **outputs, __EasyAirwindows_VstInt32 sampleFrames) = 0;

    virtual __EasyAirwindows_VstInt32 getChunk(void **data, bool isPreset) { return 0; };

    virtual __EasyAirwindows_VstInt32 setChunk(void *data, __EasyAirwindows_VstInt32 byteSize, bool isPreset) { return 0; };

    virtual float getParameter(__EasyAirwindows_VstInt32 index) { return 0.f; };
    virtual void setParameter(__EasyAirwindows_VstInt32 index, float value) {};
    virtual void getParameterLabel(__EasyAirwindows_VstInt32 index, char *text) {};
    virtual void getParameterName(__EasyAirwindows_VstInt32 index, char *text) {};
    virtual void getParameterDisplay(__EasyAirwindows_VstInt32 index, char *text) {};
    virtual __EasyAirwindows_VstInt32 canDo(char *text) = 0;
};

typedef EasyAirwindowsAudioEffect EasyAirwindowsAudioEffectX;

}

#pragma warning(pop)
